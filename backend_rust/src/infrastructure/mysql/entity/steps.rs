//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "steps")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub recipe_id: String,
    pub description: String,
    pub resource_id: u64,
    pub order_number: u32,
    pub duration: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::process_steps::Entity")]
    ProcessSteps,
    #[sea_orm(
        belongs_to = "super::recipes::Entity",
        from = "Column::RecipeId",
        to = "super::recipes::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Recipes,
    #[sea_orm(
        belongs_to = "super::resources::Entity",
        from = "Column::ResourceId",
        to = "super::resources::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Resources,
}

impl Related<super::process_steps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProcessSteps.def()
    }
}

impl Related<super::recipes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipes.def()
    }
}

impl Related<super::resources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Resources.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
