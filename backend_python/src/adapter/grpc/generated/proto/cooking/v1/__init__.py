# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/cooking/v1/process.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class CalculateProcessRequest(betterproto.Message):
    """Request: Client provides recipes with steps (no start_time yet)"""

    recipes: List["Recipe"] = betterproto.message_field(1)
    resources: List["Resource"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Recipe(betterproto.Message):
    id: str = betterproto.string_field(1)
    steps: List["Step"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Step(betterproto.Message):
    id: str = betterproto.string_field(1)
    duration_minutes: int = betterproto.int32_field(2)
    resource_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Resource(betterproto.Message):
    """Resources used in steps"""

    id: str = betterproto.string_field(1)
    quantity: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CalculateProcessResponse(betterproto.Message):
    """Response: Server attaches start_time to each step"""

    recipes: List["RecipeWithSchedule"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RecipeWithSchedule(betterproto.Message):
    id: str = betterproto.string_field(1)
    steps: List["StepWithSchedule"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StepWithSchedule(betterproto.Message):
    id: str = betterproto.string_field(1)
    duration_minutes: int = betterproto.int32_field(2)
    resource_id: str = betterproto.string_field(3)
    start_time: int = betterproto.uint64_field(4)


class ProcessServiceStub(betterproto.ServiceStub):
    async def calculate_process(
        self,
        calculate_process_request: "CalculateProcessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CalculateProcessResponse":
        return await self._unary_unary(
            "/proto.cooking.v1.ProcessService/CalculateProcess",
            calculate_process_request,
            CalculateProcessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ProcessServiceBase(ServiceBase):

    async def calculate_process(
        self, calculate_process_request: "CalculateProcessRequest"
    ) -> "CalculateProcessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_calculate_process(
        self,
        stream: "grpclib.server.Stream[CalculateProcessRequest, CalculateProcessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.calculate_process(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/proto.cooking.v1.ProcessService/CalculateProcess": grpclib.const.Handler(
                self.__rpc_calculate_process,
                grpclib.const.Cardinality.UNARY_UNARY,
                CalculateProcessRequest,
                CalculateProcessResponse,
            ),
        }
